"""
This type stub file was generated by pyright.
"""

class LDAPBase:
    indent = ...
    collapsed = ...
    filters = ...
    def simplify(self): # -> Self:
        ...
    
    def to_string(self, indent, indt_char, level):
        ...
    
    def match(self, data):
        ...
    
    @staticmethod
    def parse(filt): # -> object:
        ...
    
    @staticmethod
    def escape(data):
        ...
    
    @staticmethod
    def unescape(data):
        ...
    
    @staticmethod
    def match_string(data, filt): # -> bool:
        ...
    
    @staticmethod
    def match_substring(data, filt): # -> bool:
        ...
    
    @staticmethod
    def match_approx(data, filt): # -> bool:
        ...
    
    @staticmethod
    def match_lte(data, filt): # -> bool:
        ...
    
    @staticmethod
    def match_gte(data, filt): # -> bool:
        ...
    
    @staticmethod
    def AND(filt): # -> GroupAnd:
        ...
    
    @staticmethod
    def OR(filt): # -> GroupOr:
        ...
    
    @staticmethod
    def NOT(filt): # -> GroupNot:
        ...
    


class Filter(LDAPBase):
    def __init__(self, attr, comp, val) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __add__(self, other):
        ...
    
    def __radd__(self, other):
        ...
    
    def match(self, data): # -> bool | None:
        ...
    
    def to_string(self, indent=..., indt_char=..., level=...): # -> str:
        ...
    
    @staticmethod
    def attribute(name): # -> Attribute:
        ...
    


class Group(LDAPBase):
    def __init__(self, comp, filters) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __add__(self, other):
        ...
    
    def __radd__(self, other):
        ...
    
    def match(self, data):
        ...
    
    def to_string(self, indent=..., indt_char=..., level=...): # -> str:
        ...
    


class GroupOr(Group):
    def __init__(self, filters) -> None:
        ...
    
    def match(self, data): # -> bool:
        ...
    


class GroupAnd(Group):
    def __init__(self, filters) -> None:
        ...
    
    def match(self, data): # -> bool:
        ...
    


class GroupNot(Group):
    def __init__(self, filters) -> None:
        ...
    
    def match(self, data): # -> bool:
        ...
    
    def simplify(self): # -> Self:
        ...
    


class Attribute:
    def __init__(self, name) -> None:
        ...
    
    def present(self): # -> Filter:
        ...
    
    def raw(self, value): # -> Filter:
        ...
    
    def equal_to(self, value): # -> Filter:
        ...
    
    def starts_with(self, value): # -> Filter:
        ...
    
    def ends_with(self, value): # -> Filter:
        ...
    
    def contains(self, value): # -> Filter:
        ...
    
    def approx(self, value): # -> Filter:
        ...
    
    def lte(self, value): # -> Filter:
        ...
    
    def gte(self, value): # -> Filter:
        ...
    
    @staticmethod
    def escape(data):
        ...
    


class ParserActions:
    @staticmethod
    def elements_to_string(elements=...): # -> LiteralString | str | None:
        ...
    
    def return_string(self, input, start, end, elements=...): # -> LiteralString | str | None:
        ...
    
    def return_hex(self, input, start, end, elements=...): # -> int | None:
        ...
    
    def return_escaped_char(self, input, start, end, elements=...): # -> str | None:
        ...
    
    @staticmethod
    def return_options(input, start, end, attr, opts=..., elements=...):
        ...
    
    def return_oid_type(self, input, start, end, elements=...): # -> dict[str, str | Any] | None:
        ...
    
    def return_attr_type(self, input, start, end, elements=...): # -> dict[str, str | Any] | None:
        ...
    
    @staticmethod
    def return_simple_filter(input, start, end, elements=...): # -> Filter:
        ...
    
    @staticmethod
    def return_present_filter(input, start, end, elements=...): # -> Filter:
        ...
    
    @staticmethod
    def return_wildcard(input, start, end, elements=...): # -> Filter:
        ...
    
    @staticmethod
    def return_filter(input, start, end, filt=..., elements=...): # -> Filter | GroupAnd | GroupOr | GroupNot | None:
        ...
    
    @staticmethod
    def return_and_filter(input, start, end, filters=..., elements=...): # -> GroupAnd | None:
        ...
    
    @staticmethod
    def return_or_filter(input, start, end, filters=..., elements=...): # -> GroupOr | None:
        ...
    
    @staticmethod
    def return_not_filter(input, start, end, filt=..., elements=...): # -> GroupNot | None:
        ...
    


class InvalidIndentChar(Exception):
    ...


