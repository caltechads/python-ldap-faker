"""
This type stub file was generated by pyright.
"""

"""LDAP Parser

This parser is generated by the canopy
library (`canopy.jcoglan.com <http://canopy.jcoglan.com/>`__).

"""
class TreeNode:
    def __init__(self, text, offset, elements=...) -> None:
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        ...
    


class TreeNode1(TreeNode):
    def __init__(self, text, offset, elements) -> None:
        ...
    


class TreeNode2(TreeNode):
    def __init__(self, text, offset, elements) -> None:
        ...
    


class TreeNode3(TreeNode):
    def __init__(self, text, offset, elements) -> None:
        ...
    


class TreeNode4(TreeNode):
    def __init__(self, text, offset, elements) -> None:
        ...
    


class TreeNode5(TreeNode):
    def __init__(self, text, offset, elements) -> None:
        ...
    


class TreeNode6(TreeNode):
    def __init__(self, text, offset, elements) -> None:
        ...
    


class TreeNode7(TreeNode):
    def __init__(self, text, offset, elements) -> None:
        ...
    


class TreeNode8(TreeNode):
    def __init__(self, text, offset, elements) -> None:
        ...
    


class TreeNode9(TreeNode):
    def __init__(self, text, offset, elements) -> None:
        ...
    


class TreeNode10(TreeNode):
    def __init__(self, text, offset, elements) -> None:
        ...
    


class TreeNode11(TreeNode):
    def __init__(self, text, offset, elements) -> None:
        ...
    


class TreeNode12(TreeNode):
    def __init__(self, text, offset, elements) -> None:
        ...
    


class TreeNode13(TreeNode):
    def __init__(self, text, offset, elements) -> None:
        ...
    


class TreeNode14(TreeNode):
    def __init__(self, text, offset, elements) -> None:
        ...
    


class TreeNode15(TreeNode):
    def __init__(self, text, offset, elements) -> None:
        ...
    


class TreeNode16(TreeNode):
    def __init__(self, text, offset, elements) -> None:
        ...
    


class ParseError(SyntaxError):
    ...


FAILURE = ...
class Grammar:
    _cache = ...
    _input = ...
    _input_size = ...
    _actions = ...
    REGEX_1 = ...
    REGEX_2 = ...
    REGEX_3 = ...
    REGEX_4 = ...
    REGEX_5 = ...
    REGEX_6 = ...


class Parser(Grammar):
    def __init__(self, inpt, actions, types) -> None:
        ...
    
    def parse(self): # -> object:
        ...
    


def format_error(inpt, offset, expected):
    ...

def parse(inpt, actions=..., types=...): # -> object:
    ...

